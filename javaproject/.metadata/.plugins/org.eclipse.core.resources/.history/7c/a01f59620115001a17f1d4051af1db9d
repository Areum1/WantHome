package wantHome;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Area;
import java.awt.image.BufferedImage;
import java.io.InputStream;

import javax.imageio.ImageIO;
import javax.swing.JPanel;
import javax.swing.Timer;



public class GameStart extends JPanel {
	double randomValue = Math.random();
	int intRandom1 = (int)(randomValue * 800)+600;
	int intRandom2 = (int)(randomValue * 200)+600;
	
	BufferedImage bmap1,bmap2,bcha1,bcha2,bcha3,bcha4,bcha5,bcha6,benemy1;
	public int y,x;
	public static int y1=147;
	public static int y2=447;
	
	int flag=1;
	
	private BufferedImage fly;
    private BufferedImage spider;
    private BufferedImage kong;

    private Rectangle spiderBounds;
    private Rectangle flyBounds;

    private Point spiderDelta;
    private Point flyDelta;

    private Rectangle collision;
    
	public GameStart(){
		String map1 = "../images/map1.png";
		String map2 = "../images/map2.png";
		String cha1 = "../images/cha1_1.png";
		String cha4 = "../images/cha2_1.png";
		String enemy1 = "../images/Android1.png";
		InputStream icha1 = this.getClass().getResourceAsStream(cha1);
		InputStream icha4 = this.getClass().getResourceAsStream(cha4);
		InputStream imap1 = this.getClass().getResourceAsStream(map1);
		InputStream imap2 = this.getClass().getResourceAsStream(map2);
		InputStream ienemy1 = this.getClass().getResourceAsStream(enemy1);
		
		try{
			bmap1 = ImageIO.read(imap1);
			bmap2 = ImageIO.read(imap2);
			bcha1 = ImageIO.read(icha1);
			bcha4 = ImageIO.read(icha4);
			benemy1 = ImageIO.read(ienemy1);
			
			
		}catch(Exception e){
			e.printStackTrace();
		}
		
		new Thread(){
			public void run(){
				while(true){
					try{
						Thread.sleep(170);
						if(intRandom1 < 0) { // 이미지가 화면에서 사라지면 다시 랜덤 돌려서 다시 띄움
							intRandom1 = (int)(randomValue * 800)+700;
						}
						if(intRandom2 < 0) {
							intRandom2 = (int)(randomValue * 200)+700;
						}
					}catch(Exception E){
						E.printStackTrace();
					}
					x-=15;
					
					// 부딪히는 코드
					
					intRandom1 -= 40;
					intRandom2 -= 40;
					
					addKeyListener(new ChaJump());
					if(ChaJump.flag1 == 1 && y1 > 130) {
						y1 -= 80;
					}
					if(y1 != 147) {
						y1 +=10;
						ChaJump.flag1 = 0;
					}
					if(ChaJump.flag2 == 1 && y2 > 435) {
						y2 -= 80;
					}
					if(y2 != 447) {
						y2 +=10;
						ChaJump.flag2 = 0;
					}
					if(x>=GameStart.this.getWidth()){
						x=0;
						if(y>=GameStart.this.getHeight()){
							break;
						}
					}
				}
			}
		}.start();
	}
//	@Override
//	protected void paintComponent(Graphics arg0) {
//		
//		super.paintComponent(arg0);
//		Graphics2D g2d = (Graphics2D)arg0;
//		g2d.drawImage(bmap1,x,y,this);
//		g2d.drawImage(bmap2,x,y+300,this);
//		g2d.drawImage(benemy1, intRandom1,188,this); // 위 안드로이드 이미지를 랜덤하게 보이게 함 
//		g2d.drawImage(benemy1, intRandom2,488,this); // 아래 안드로이드 이미지를 랜덤하게 보이게 함
//
//		g2d.drawImage(spider, spiderBounds.x, spiderBounds.y, this);
//	    g2d.drawImage(fly, flyBounds.x, flyBounds.y, this);
//		
//		g2d.drawImage(bcha1,300,y1,this); //y1값이 점프할 때마다 달라짐
//		g2d.drawImage(bcha4,140,y2,this); //y2값이 점프할 때마다 달라짐
//		
//		if (collision != null) {
//        	System.out.println("충돌");
//g2d.setColor(new Color(255, 0, 0, 128));
//g2d.fill(collision);
//            g2d.drawImage(kong, flyBounds.x, flyBounds.y, this);
//        }
//
//        g2d.dispose();
//		
//	}
	
	protected void update(Rectangle bounds, Point delta) {
        bounds.x += delta.x;
        bounds.y += delta.y;
        if (bounds.x < 0) {
            bounds.x = 0;
            delta.x *= -1;
        }
        if (bounds.x + bounds.width > getWidth()) {
            bounds.x = getWidth() - bounds.width;
            delta.x *= -1;
        }
        if (bounds.y < 0) {
            bounds.y = 0;
            delta.y *= -1;
        }
        if (bounds.y + bounds.height > getHeight()) {
            bounds.y = getHeight() - bounds.height;
            delta.y *= -1;
        }
    }

    @Override
    public Dimension getPreferredSize() {
        return new Dimension(Main.SCREEN_WIDTH, Main.SCREEN_HEIGHT);
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g.create();

        g2d.drawImage(spider, spiderBounds.x, spiderBounds.y, this);
        g2d.drawImage(fly, flyBounds.x, flyBounds.y, this);

        if (collision != null) {
        	System.out.println("충돌");
            g2d.setColor(new Color(255, 0, 0, 128));
           g2d.fill(collision);
            g2d.drawImage(kong, flyBounds.x, flyBounds.y, this);
        }

        g2d.dispose();
    }

    /**
     * Used to detect the collision between non-alpha portions of the two
     * images
     */
    protected void detectCollision() {
        collision = null;
        // Check if the boundires intersect
        if (spiderBounds.intersects(flyBounds)) {
            // Calculate the collision overlay
            Rectangle bounds = getCollision(spiderBounds, flyBounds);
            if (!bounds.isEmpty()) {
                // Check all the pixels in the collision overlay to determine
                // if there are any non-alpha pixel collisions...
                for (int x = bounds.x; x < bounds.x + bounds.width; x++) {
                    for (int y = bounds.y; y < bounds.y + bounds.height; y++) {
                        if (collision(x, y)) {
                            collision = bounds;
                            break;
                        }
                    }
                }
            }
        }
    }

    protected Rectangle getCollision(Rectangle rect1, Rectangle rect2) {
        Area a1 = new Area(rect1);
        Area a2 = new Area(rect2);
        a1.intersect(a2);
        return a1.getBounds();
    }

    /**
     * Test if a given x/y position of the images contains transparent
     * pixels or not...
     * @param x
     * @param y
     * @return 
     */
    protected boolean collision(int x, int y) {
        boolean collision = false;

        int spiderPixel = spider.getRGB(x - spiderBounds.x, y - spiderBounds.y);
        int flyPixel = fly.getRGB(x - flyBounds.x, y - flyBounds.y);
        // 255 is completely transparent, you might consider using something
        // a little less absolute, like 225, to give you a sligtly
        // higher hit right, for example...
        if (((spiderPixel >> 24) & 0xFF) < 255 && ((flyPixel >> 24) & 0xFF) < 255) {
            collision = true;
        }
        return collision;
    }
}